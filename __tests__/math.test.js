/**
 * __tests__/math.test.js
 *
 * TOGGLE INSTRUCTIONS:
 * - To make CI FAIL on purpose:
 *     1) UNcomment the block in "Section A — WRONG on purpose"
 *     2) Comment out the block in "Section B — CORRECT"
 *     3) Commit & push ? GitHub Actions should turn RED ?
 * - To FIX it (make CI PASS):
 *     1) Comment Section A
 *     2) UNcomment Section B
 *     3) Commit & push ? Actions should turn GREEN ?
 */

const { sum, subtract, multiply, divide, average, clamp, isEven } = require('../src/math');

// ???????????????????????????????????????????????????????????????????????????????
// Section A — WRONG on purpose (use this to force a failing build)
// UNCOMMENT this block when you want CI to fail.
// ???????????????????????????????????????????????????????????????????????????????

test('sum works (WRONG on purpose)', () => {
   expect(sum(2, 3)).toBe(6); //  wrong expected value to trigger failure
 });

// ???????????????????????????????????????????????????????????????????????????????
// Section B — CORRECT (default, keep this enabled for normal passing builds)
// ???????????????????????????????????????????????????????????????????????????????

//test('sum works (correct)', () => {
//    expect(sum(2, 3)).toBe(5); // correct expectation
//  });

// ???????????????????????????????????????????????????????????????????????????????
// Additional tests (should pass if ../src/math is implemented per the lab)
// ???????????????????????????????????????????????????????????????????????????????

describe('math helpers', () => {
    test('subtract works', () => expect(subtract(5, 3)).toBe(2));
    test('multiply works', () => expect(multiply(4, 3)).toBe(12));
    test('divide works', () => expect(divide(10, 2)).toBe(5));
    test('divide by zero throws', () =>
        expect(() => divide(1, 0)).toThrow('Cannot divide by zero'));
    test('average works', () => expect(average([2, 4, 6])).toBe(4));
    test('clamp works', () => {
        expect(clamp(10, 0, 5)).toBe(5);
        expect(clamp(-1, 0, 5)).toBe(0);
        expect(clamp(3, 0, 5)).toBe(3);
    });
    test.each([
        [0, true],
        [1, false],
        [2, true],
        [99, false],
    ])('isEven(%i)', (n, expected) => {
        expect(isEven(n)).toBe(expected);
    });
});
